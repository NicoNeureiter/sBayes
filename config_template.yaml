
data:
    # Information on the data for an sBayes analysis.
    features: <REQUIRED>                # Path to the CSV file with features used for the analysis.
    feature_states: <REQUIRED>          # Path to the CSV file defining the possible states for each feature.
    projection: epsg:4326               # String identifier of the projection in which locations are given.

model:
    # Configuration of the sBayes model.
    clusters: 1                         # The number of clusters to be inferred.
    confounders: []                     # The list of confounder names.

    prior:
        # Configuration of all priors of a sBayes model.
        confounding_effects: <REQUIRED> # The priors for the confounding_effects in each group of each confounder.

        cluster_effect:
            # Configuration of the prior on the parameters of the cluster-effect.
            type: uniform               # Type of prior distribution. Choose from: [uniform, dirichlet, jeffreys, BBS, symmetric_dirichlet]
            file: <REQUIRED>            # Path to parameters of the Dirichlet distribution (YAML or JSON format). This or `parameters` is required if type=dirichlet.
            parameters: <REQUIRED>      # Parameters of the Dirichlet distribution. This or `file` is required if type=dirichlet.
            prior_concentration: <REQUIRED> # The concentration of the prior distribution. Required if type=symmetric_dirichlet.

        geo:
            # Configuration of the geo-prior.
            type: uniform               # Type of prior distribution. Choose from: [uniform, cost_based, simulated].
            costs: from_data            # Source of the geographic costs used for cost_based geo-prior. Either `from_data` (derive geodesic distances from locations) or path to a CSV file.
            aggregation: mean           # Policy defining how costs of single edges are aggregated. Choose from: [mean, sum or max].
            probability_function: exponential # Monotonic function that defines how aggregated costs are mapped to prior probabilities.
            rate: <REQUIRED>            # Rate at which the prior probability decreases for a cost_based geo-prior. Required if type=cost_based.
            inflection_point: <REQUIRED> # Value where the sigmoid probability function reaches 0.5. Required if type=cost_based and probability_function=sigmoid.
            skeleton: mst               # The graph along which the costs are aggregated. Per default, the cost of edges on the minimum spanning tree (mst) are aggregated. Choose from: [mst, delaunay, diameter, complete_graph]

        objects_per_cluster:
            # Configuration of the area size prior.
            type: <REQUIRED>            # Type of prior distribution. Choose from: [uniform_area, uniform_size or quadratic].
            min: 2                      # Minimum cluster size.
            max: 10000                  # Maximum cluster size.

        weights:
            # Configuration of the prion on the weights of the mixture components.
            type: uniform               # Type of prior distribution. Choose from: [uniform, dirichlet, jeffreys, BBS, symmetric_dirichlet]
            file: <REQUIRED>            # Path to parameters of the Dirichlet distribution (YAML or JSON format). This or `parameters` is required if type=dirichlet.
            parameters: <REQUIRED>      # Parameters of the Dirichlet distribution. This or `file` is required if type=dirichlet.
            prior_concentration: <REQUIRED> # The concentration of the prior distribution. Required if type=symmetric_dirichlet.

mcmc:
    # Configuration of MCMC parameters.
    steps: 1000000                      # The total number of iterations in the MCMC chain.
    samples: 1000                       # The number of samples to be generated (more samples implies lower sampling interval).
    runs: 1                             # The number of times the sampling is repeated (with new output files for each run).
    sample_from_prior: false            # If `true`, the MCMC ignores the data and samples parameters from the prior distribution.
    grow_to_adjacent: 0.8               # The fraction of grow-steps that only propose adjacent languages as candidates to be added to an area.
    screen_log_interval: 1000           # Frequency at which the step ID and log-likelihood are written to the screen logger (and log file).

    operators:
        # The frequency at which each parameter is updated by an MCMC operator. Will be normalized to 1.0 at runtime.
        clusters: 70.0                  # Frequency at which the assignment of objects to clusters is changed.
        weights: 10.0                   # Frequency at which mixture weights are changed.
        source: 20.0                    # Frequency at which the assignments of observations to mixture components are changed.

    initialization:
        # Configuration for the initialization of a sample in each warm-up chain of the MCMC.
        attempts: 10                    # Number of initial samples for each warm-up chain. Only the one with highest posterior will be used.
        em_steps: 50                    # Number of steps in the expectation-maximization initializer.
        objects_per_cluster: 10         # The average number of objects assigned to each cluster in the initialization phase.

    warmup:
        # Configuration of the warm-up phase in the MCMC chain.
        warmup_steps: 50000             # The number of steps performed in the warm-up phase.
        warmup_chains: 10               # The number parallel chains used in the warm-up phase.

    mc3:
        # Configuration of Metropolis-Coupled Markov Chain Monte Carlo (MC3) parameters.
        activate: false                 # If `true`, use Metropolis-Coupled Markov Chain Monte Carlo sampling (MC3).
        chains: 4                       # Number of MC3 chains.
        swap_interval: 1000             # Number of MCMC steps between each MC3 chain swap attempt.
        temperature_diff: 0.05          # Difference between temperatures of MC3 chains.
        prior_temperature_diff: temperature_diff # Difference between prior-temperatures of MC3 chains. Defaults to the same values as `temperature_diff`.
        exponential_temperatures: false # If `true`, temperature increase exponentially ((1 + dt)**i), instead of linearly (1 + dt*i).
        log_swap_matrix: true           # If `True`, write a matrix containing the number of swaps between each pair of chains to an npy-file.

results:
    # Information on where and how results are written.
    path: results                       # Path to the results directory.
    log_file: true                      # Whether to write log-messages to a file.
    log_likelihood: true                # Whether to log the likelihood of each observation in a .h5 file (used for model comparison).
    log_source: false                   # Whether to log the proportion of objects assigned to each component in each feature.
    log_hot_chains: true                # Whether to create log files (clusters, stats and operator_stats) for hot MC3 chains.
    float_precision: 8                  # The precision (number of decimal places) of real valued parameters in the stats file.
